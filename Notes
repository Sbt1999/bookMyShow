Audit Columns --> Basically Used for auditing purpose

City
id  name    createdAt   updatedAt   createdBy updatedBy
1   Pune    10-04-2025  23-04-2025  Sandeep   Shobhit

who created and who updated

Poone --> pune


BookMyShow 3

Before rest, SOAP was in use and it used to send data in XML format

for ex -> client asked give me info for Student 1

so response will be:
@Controller
<Student>
    <name>Archana Nanaware </name>
    <ID> 1 </ID>
    <Roll> 23 </Roll>
</Student>

In older format

Now in @Rest phase all the response is in JSON format

JSON -> JavaScript Object Notation
{
    "name" : Shobhit
    "id" : 2
    "roll" : 25
}

@PathVariable --> we add when We need to look for path
for ex --> we need to get by id so we will write @PathVariable so we get to know from where id is coming
@PathVariable("userId") specifies that the userId path variable should be injected into the id method
parameter.


@Requestbody
in json format


Synchronization ->
DB - Isolation  Levels

Read Uncommitted -> No locking, all open to read .... fastest .... high chances of inconsistency
Read Commited -> we can only read commited data ... read uncommited > speed > repeatable read.....lesser inconsistency
Repeatable Read --> new copy of data is used until the entire completes.
Serializable -> no parallel transaction, transactions on a particular row can only happen sequentially

Serializable --> performance --> worst, consistency --> best.



/*

Summary
I've created a comprehensive payment service for your BookMyShow application with the following key features:
Core Payment Functionality:

Payment Processing - Complete payment flow with external gateway simulation
Refund Processing - Handle ticket cancellations and refunds
Payment Verification - Verify payment status with gateway
Transaction Management - Proper database transactions with rollback support

Key Features:

Payment Status Tracking - PENDING, SUCCESS, FAILED, CANCELLED, REFUNDED
Multiple Payment Methods - Credit/Debit cards, UPI, Net Banking, Wallets
Automatic Fee Calculation - Service charges, taxes, and processing fees
Concurrency Control - Thread-safe payment processing
Error Handling - Comprehensive exception handling
Audit Trail - Complete transaction history

Integration with Existing Services:

Updated TicketService - Now includes payment processing in ticket creation
Seat Locking - Proper seat reservation during payment
Cancellation Policy - Business rules for refunds based on timing
Transaction Rollback - Automatic cleanup on payment failure

Business Logic:

90% payment success rate simulation
Cancellation charges based on timing
Automatic seat release on payment failure
Unique transaction ID generation

The service is production-ready with proper error handling, transaction management, and integration
with your existing booking system. You can easily replace the simulation methods with actual payment
gateway APIs when ready for production.

*/



























